[{"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/index.js":"1","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/reportWebVitals.js":"2","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/App.js":"3","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/pages/workSpace/WorkSpace.js":"4","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/pages/home/Home.js":"5","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/components/navbar/Navbar.js":"6","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/utils/apikeys.js":"7","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/components/spinner/Spinner.js":"8"},{"size":500,"mtime":1648862985836,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1648862985836,"results":"11","hashOfConfig":"10"},{"size":428,"mtime":1654099359874,"results":"12","hashOfConfig":"10"},{"size":9876,"mtime":1656171515588,"results":"13","hashOfConfig":"10"},{"size":1381,"mtime":1656171364439,"results":"14","hashOfConfig":"10"},{"size":353,"mtime":1654099854389,"results":"15","hashOfConfig":"10"},{"size":95,"mtime":1655442309827,"results":"16","hashOfConfig":"10"},{"size":255,"mtime":1655526175382,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"d4r0ju",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/index.js",[],[],["45","46"],"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/reportWebVitals.js",[],[],"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/App.js",[],[],"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/pages/workSpace/WorkSpace.js",["47","48","49","50","51","52","53","54","55","56"],[],"import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport Navbar from '../../components/navbar/Navbar'\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport './workspace.css'\nimport HomeImg from '../../assets/images/home.jpg'\nimport DownArrow from '../../assets/images/down_arrow.png'\nimport axios from 'axios';\nimport { CRYPTO_API } from '../../utils/apikeys';\nimport Spinner from '../../components/spinner/Spinner';\n\nfunction WorkSpace() {\n\n\n    const [selectedCoin, setSelectedCoin] = useState({ name: 'Bitcoin', price: 445, key: 'BTC' })\n\n    const [forecastData, setForecastData] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [currentPrice, setCurrentPrice] = useState(0)\n\n    const [coins, setCoins] = useState([\n        { name: 'Ethereum', price: 'Loading...', key: 'ETH' },\n        { name: 'Ethereum classic', price: 'Loading...', key: 'ETC' },\n        { name: 'EOS', price: 'Loading...', key: 'EOS' },\n        { name: 'Cardano', price: 'Loading...', key: 'ADA' },\n        { name: 'Dogecoin', price: 'Loading...', key: 'DOGE' },\n        // { name: 'IOTA', price: 'Loading...', key: 'MIOTA' },\n        { name: 'LiteCoin', price: 'Loading...', key: 'LTC' },\n        { name: 'Maker', price: 'Loading...', key: 'MKR' },\n        { name: 'Monero', price: 'Loading...', key: 'XMR' },\n        { name: 'Stellar', price: 'Loading...', key: 'XLM' },\n        { name: 'Tron', price: 'Loading...', key: 'TRX' },\n        { name: 'ZCash', price: 'Loading...', key: 'ZEC' },])\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n                labels: {\n                    fontColor: \"blue\",\n                    fontSize: 18\n                }\n            },\n            title: {\n                display: false,\n                text: 'Chart.js Line Chart',\n            },\n\n        },\n    };\n    const getCurrentPrice = async () => {\n        let tempCoins = [...coins]\n\n        await Promise.all(tempCoins.forEach(async (coin, id) => {\n            try {\n                let response = await axios.get(\"https://api.binance.com/api/v3/ticker/price?symbol=\" + coin.key + 'USDT')\n                if (response.status == 200) {\n                    console.log(response.data.price)\n                    tempCoins[id].price = (response.data.price)\n                } else {\n                    return 'error'\n                }\n            } catch (error) {\n\n            }\n        }))\n\n        setCoins([...tempCoins])\n    }\n\n\n    const getForecastData = async (coinName) => {\n        setLoading(true)\n        console.log(coinName)\n        try {\n            let response = await axios.get('http://127.0.0.1:5000/', {\n                params: {\n                    coin: coinName\n                }\n            }, {\n                'content-type': 'application/json',\n                'access-control-allow-origin': '*'\n            });\n\n            if (response) {\n                // success\n                let data = response.data;\n                // data = JSON.Parse(data)\n                // data.map((d, id) => data[id] = -1 * parseInt(d))\n\n                let dataArray = data.split(',')\n                dataArray[0] = dataArray[0].split('[')[1]\n                dataArray[dataArray.length - 1] = dataArray[dataArray.length - 1].split(']')[0]\n                dataArray.map((a, id) => dataArray[id] = Number(a.trim()).toFixed(2))\n                setForecastData(dataArray)\n\n            }\n            setLoading(false)\n\n        } catch (error) {\n            console.error(error)\n            setLoading(false)\n        }\n    }\n\n\n    const getCoinData = async () => {\n        try {\n            let response = await axios.get('https://api.coingecko.com/api/v3/coins/zcash', {\n\n            });\n\n            if (response) {\n                // success\n                const json = response.data;\n                // json.forEach(coin => {\n                //     coins.forEach(coin2 => {\n                //         if (coin.symbol == coin2.key.toLowerCase()) {\n                //             console.log(coin)\n                //         }\n                //     })\n\n                // })\n            }\n        } catch (ex) {\n            // response = null;\n\n        }\n\n    }\n\n    const foreCastLabelCreator = () => {\n        let now = new Date();\n        var date = new Date(now.setDate(now.getDate() - 28));\n        let timeArray = [];\n        for (let i = 0; i < 30; i++) {\n            timeArray.push(formatAMPM(date))\n            date.setDate(date.getDate() + 1)\n        }\n\n        // console.log(timeArray)\n        return timeArray\n    }\n\n    const previousPredictionLabelCreator = () => {\n        let date = new Date();\n        let timeArray = [];\n        for (let i = 0; i < 15; i++) {\n            timeArray.push(formatAMPM(date))\n            date.setMinutes(date.getMinutes() - 1)\n        }\n\n        // console.log(timeArray)\n        return timeArray.reverse();\n    }\n\n\n    function formatAMPM(date) {\n\n        return date.toLocaleDateString();\n    }\n\n\n    const data1 = {\n        labels: foreCastLabelCreator(),\n\n        datasets: [\n            // {\n            //     label: 'Dataset 1',\n            //     data: labels.map((i, index) => index),\n            //     borderColor: 'rgb(255, 99, 132)',\n            //     backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            // },\n            {\n                label: 'Predicted Value',\n                data: forecastData,\n                borderColor: 'yellow',\n                backgroundColor: 'yellow',\n                labelColor: 'white'\n            },\n        ],\n    };\n\n    const data2 = {\n        labels: previousPredictionLabelCreator(),\n\n        datasets: [\n            {\n                label: 'Actual Value',\n                data: [...new Array(15)]\n                    .map(() => Math.round(Math.random() * 200)).map((i, index) => i),\n                borderColor: 'aqua',\n                backgroundColor: 'aqua',\n            },\n            {\n                label: 'Predicted Value',\n                data: [...new Array(15)]\n                    .map(() => Math.round(Math.random() * 200)).map((i, index) => i),\n                borderColor: 'ghostwhite',\n                backgroundColor: 'ghostwhite',\n\n            },\n        ],\n    };\n    ChartJS.register(\n        CategoryScale,\n        LinearScale,\n        PointElement,\n        LineElement,\n        Title,\n        Tooltip,\n        Legend\n    );\n    const CoinComponent = ({ coin, id }) => {\n\n\n\n\n\n\n\n\n        return (<div className='coinComp'\n            style={selectedCoin.name == coin.name ? {\n                // backgroundColor: '#0d9078',\n                color: 'white',\n                border: `1px solid #0d9078`,\n                transform: `scale(1.1)`,\n\n            } : {}}\n            onClick={() => { setSelectedCoin(coin); getForecastData(coin.name.toLowerCase()) }}\n\n        >\n            <h3>{coin.name}</h3>\n            <p style={{ fontSize: 14, marginTop: 5 }} >${Number(coin.price).toFixed(2)}</p>\n        </div>)\n    }\n    useEffect(() => {\n        foreCastLabelCreator()\n        getForecastData('ethereum')\n        getCoinData()\n        getCurrentPrice()\n        setSelectedCoin(coins[0])\n    }, [])\n\n\n    return (\n        <div\n            className='workSpace'\n            style={{\n                background: `url(${HomeImg})`,\n                backgroundSize: 'contain',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '100% 100%'\n            }}\n        >\n            <Navbar />\n            <div className='sec_1'\n\n            >\n                <div className='sideBar'\n\n                >\n                    <div className='coinWrpr' >\n                        {coins.map((coin, id) => <CoinComponent id={id} coin={coin} />)}\n\n\n                    </div>\n                    <div className='overlay' >\n                        <img src={DownArrow} style={{ width: 25, height: 25, marginTop: 10 }} />\n\n                    </div>\n                </div>\n\n                <div className='graph_container'>\n\n                    <div\n                        className='graph_wrpr'\n                        style={{ backdropFilter: `blur(100px)` }}\n                    >\n                        {loading ? <Spinner /> :\n                            <>\n                                <div className='heading_wrpr' >\n                                    <h2>{selectedCoin.key}</h2>\n                                    <p>${Number(selectedCoin.price).toFixed(2)}</p>\n                                </div>\n\n                                <div\n                                    style={{ paddingTop: 50, backdropFilter: `blur(100px)` }}\n                                >\n\n                                    <p>Tomorrow's price: ${forecastData[29]}</p>\n                                    <Line\n                                        options={options}\n                                        data={data1}\n                                        style={{ width: 500, height: '50vh', color: 'yellow', }}\n\n                                    />\n                                </div>\n                            </>}\n                    </div>\n\n                    {/* <div\n                        style={{ marginTop: 50 }}\n                    >\n\n                        <p>Previous Prediction</p>\n                        <Line\n                            options={options}\n                            data={data2}\n                            style={{ width: 500, height: '70vh', color: 'yellow', }}\n                        />\n\n                    </div> */}\n                </div>\n                <div style={{ flex: 3 }} ></div>\n            </div>\n        </div >\n    )\n}\n\nexport default WorkSpace","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/pages/home/Home.js",["57"],[],"import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Navbar from '../../components/navbar/Navbar'\nimport HomeImg from '../../assets/images/home.jpg'\nimport './home.css'\nfunction Home() {\n    const navigate = useNavigate()\n    return (\n        <div className='home'\n            style={{\n                background: `url(${HomeImg})`,\n                backgroundSize: 'contain',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '100% 100%'\n            }}\n        >\n            <Navbar />\n            <div className='sec_1' >\n                <div>\n                    <h1>\n                        Use it with ease\n                    </h1>\n                    <div className='line' />\n                    <p>A cryptocurrency forecasting system that predicts the next day\n                        <br /> value of the world's 12 popular cryptocurrencies. It makes use of\n                        <br /> machine learning algorithms that are quite accurate.\n                        <br /> Take a look and invest your money safely ...</p>\n                    <div\n                        className='btn'\n                        onClick={() => navigate('/work-space')}\n                    >\n                        Explore\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Home","/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/components/navbar/Navbar.js",[],[],"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/utils/apikeys.js",[],[],"/home/ansif/Programming/Projects/CryptoProject/frontend-crypto/src/components/spinner/Spinner.js",[],[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":18,"column":10,"nodeType":"64","messageId":"65","endLine":18,"endColumn":20},{"ruleId":"62","severity":1,"message":"66","line":28,"column":12,"nodeType":"64","messageId":"65","endLine":28,"endColumn":24},{"ruleId":"62","severity":1,"message":"67","line":28,"column":26,"nodeType":"64","messageId":"65","endLine":28,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":66,"column":37,"nodeType":"70","messageId":"71","endLine":66,"endColumn":39},{"ruleId":"62","severity":1,"message":"72","line":124,"column":23,"nodeType":"64","messageId":"65","endLine":124,"endColumn":27},{"ruleId":"62","severity":1,"message":"73","line":193,"column":11,"nodeType":"64","messageId":"65","endLine":193,"endColumn":16},{"ruleId":"68","severity":1,"message":"69","line":233,"column":38,"nodeType":"70","messageId":"71","endLine":233,"endColumn":40},{"ruleId":"74","severity":1,"message":"75","line":253,"column":8,"nodeType":"76","endLine":253,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":263,"column":17,"nodeType":"80","messageId":"71","endLine":263,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":279,"column":25,"nodeType":"83","endLine":279,"endColumn":97},{"ruleId":"78","severity":1,"message":"79","line":14,"column":17,"nodeType":"80","messageId":"71","endLine":14,"endColumn":31},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'CRYPTO_API' is defined but never used.","Identifier","unusedVar","'currentPrice' is assigned a value but never used.","'setCurrentPrice' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'json' is assigned a value but never used.","'data2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coins', 'foreCastLabelCreator', and 'getCurrentPrice'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedCoin' needs the current value of 'coins'.","ArrayExpression",["86"],"no-dupe-keys","Duplicate key 'backgroundSize'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [coins, foreCastLabelCreator, getCurrentPrice]",{"range":"89","text":"90"},[7354,7356],"[coins, foreCastLabelCreator, getCurrentPrice]"]